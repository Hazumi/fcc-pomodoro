/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	'use strict';
	
	var $timer = document.getElementById('timer');
	var $duration = document.getElementById('duration');
	var $break = document.getElementById('break');
	var start = document.getElementById('start');
	var stop = document.getElementById('stop');
	var duration = 1500;
	var breaktime = 300;
	
	document.addEventListener('keydown', function (event) {
	  if (event.which === 13) {
	    duration = $duration.value * 60 || 1500;
	    breaktime = $break.value * 60 || 300;
	    pomodoro.stop().start(duration).on('end', function () {
	      $timer.innerHTML = "0:00";
	      this.start(breaktime).off('end');
	    });
	    console.log(duration + " " + breaktime);
	  }
	});
	
	function millisToMinutesAndSeconds(millis) {
	  var minutes = Math.floor(millis / 60000);
	  var seconds = (millis % 60000 / 1000).toFixed(0);
	  return minutes + ":" + (seconds < 10 ? '0' : '') + seconds;
	}
	
	var pomodoro = new Timer({
	  tick: 1,
	  ontick: function ontick(sec) {
	    $timer.innerHTML = millisToMinutesAndSeconds(sec);
	  },
	  onstart: function onstart() {
	    console.log('starting');
	  },
	  onstop: function onstop() {
	    pomodoro.stop();
	    console.log('Stopping');
	  },
	  onend: function onend() {
	    //timer end normally
	  }
	});
	
	start.addEventListener('click', function () {
	  pomodoro.start(duration);
	});
	
	stop.addEventListener('click', function () {
	  pomodoro.stop();
	});
	
	// options
	pomodoro.start(duration).on('end', function () {
	  this.start(breaktime).off('end');
	});

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgMWVlMjEwODg2OGY5MmJmMDkwNzYiLCJ3ZWJwYWNrOi8vLy4vanMvbWFpbi5qcyJdLCJuYW1lcyI6WyIkdGltZXIiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiJGR1cmF0aW9uIiwiJGJyZWFrIiwic3RhcnQiLCJzdG9wIiwiZHVyYXRpb24iLCJicmVha3RpbWUiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJ3aGljaCIsInZhbHVlIiwicG9tb2Rvcm8iLCJvbiIsImlubmVySFRNTCIsIm9mZiIsImNvbnNvbGUiLCJsb2ciLCJtaWxsaXNUb01pbnV0ZXNBbmRTZWNvbmRzIiwibWlsbGlzIiwibWludXRlcyIsIk1hdGgiLCJmbG9vciIsInNlY29uZHMiLCJ0b0ZpeGVkIiwiVGltZXIiLCJ0aWNrIiwib250aWNrIiwic2VjIiwib25zdGFydCIsIm9uc3RvcCIsIm9uZW5kIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7O0FDdENBLEtBQU1BLFNBQVNDLFNBQVNDLGNBQVQsQ0FBd0IsT0FBeEIsQ0FBZjtBQUNBLEtBQU1DLFlBQVlGLFNBQVNDLGNBQVQsQ0FBd0IsVUFBeEIsQ0FBbEI7QUFDQSxLQUFNRSxTQUFTSCxTQUFTQyxjQUFULENBQXdCLE9BQXhCLENBQWY7QUFDQSxLQUFNRyxRQUFRSixTQUFTQyxjQUFULENBQXdCLE9BQXhCLENBQWQ7QUFDQSxLQUFNSSxPQUFPTCxTQUFTQyxjQUFULENBQXdCLE1BQXhCLENBQWI7QUFDQSxLQUFJSyxXQUFXLElBQWY7QUFDQSxLQUFJQyxZQUFZLEdBQWhCOztBQUVBUCxVQUFTUSxnQkFBVCxDQUEwQixTQUExQixFQUFxQyxVQUFTQyxLQUFULEVBQWdCO0FBQ25ELE9BQUlBLE1BQU1DLEtBQU4sS0FBZ0IsRUFBcEIsRUFBd0I7QUFDdEJKLGdCQUFXSixVQUFVUyxLQUFWLEdBQWtCLEVBQWxCLElBQXdCLElBQW5DO0FBQ0FKLGlCQUFZSixPQUFPUSxLQUFQLEdBQWUsRUFBZixJQUFxQixHQUFqQztBQUNBQyxjQUFTUCxJQUFULEdBQWdCRCxLQUFoQixDQUFzQkUsUUFBdEIsRUFBZ0NPLEVBQWhDLENBQW1DLEtBQW5DLEVBQTBDLFlBQVc7QUFDbkRkLGNBQU9lLFNBQVAsR0FBbUIsTUFBbkI7QUFDQSxZQUFLVixLQUFMLENBQVdHLFNBQVgsRUFBc0JRLEdBQXRCLENBQTBCLEtBQTFCO0FBQ0QsTUFIRDtBQUlBQyxhQUFRQyxHQUFSLENBQVlYLFdBQVcsR0FBWCxHQUFpQkMsU0FBN0I7QUFDRDtBQUNGLEVBVkQ7O0FBWUEsVUFBU1cseUJBQVQsQ0FBbUNDLE1BQW5DLEVBQTJDO0FBQ3pDLE9BQUlDLFVBQVVDLEtBQUtDLEtBQUwsQ0FBV0gsU0FBUyxLQUFwQixDQUFkO0FBQ0UsT0FBSUksVUFBVSxDQUFFSixTQUFTLEtBQVYsR0FBbUIsSUFBcEIsRUFBMEJLLE9BQTFCLENBQWtDLENBQWxDLENBQWQ7QUFDRixVQUFPSixVQUFVLEdBQVYsSUFBaUJHLFVBQVUsRUFBVixHQUFlLEdBQWYsR0FBcUIsRUFBdEMsSUFBNENBLE9BQW5EO0FBQ0Q7O0FBRUQsS0FBTVgsV0FBVyxJQUFJYSxLQUFKLENBQVU7QUFDekJDLFNBQU0sQ0FEbUI7QUFFekJDLFdBQVEsZ0JBQVVDLEdBQVYsRUFBZTtBQUNyQjdCLFlBQU9lLFNBQVAsR0FBbUJJLDBCQUEwQlUsR0FBMUIsQ0FBbkI7QUFDRCxJQUp3QjtBQUt6QkMsWUFBUyxtQkFBVztBQUNsQmIsYUFBUUMsR0FBUixDQUFZLFVBQVo7QUFDRCxJQVB3QjtBQVF6QmEsV0FBUSxrQkFBVztBQUNqQmxCLGNBQVNQLElBQVQ7QUFDQVcsYUFBUUMsR0FBUixDQUFZLFVBQVo7QUFDRCxJQVh3QjtBQVl6QmMsVUFBTyxpQkFBVztBQUNoQjtBQUNEO0FBZHdCLEVBQVYsQ0FBakI7O0FBaUJBM0IsT0FBTUksZ0JBQU4sQ0FBdUIsT0FBdkIsRUFBZ0MsWUFBVztBQUN6Q0ksWUFBU1IsS0FBVCxDQUFlRSxRQUFmO0FBQ0QsRUFGRDs7QUFJQUQsTUFBS0csZ0JBQUwsQ0FBc0IsT0FBdEIsRUFBK0IsWUFBVztBQUN4Q0ksWUFBU1AsSUFBVDtBQUNELEVBRkQ7O0FBSUE7QUFDQU8sVUFBU1IsS0FBVCxDQUFlRSxRQUFmLEVBQXlCTyxFQUF6QixDQUE0QixLQUE1QixFQUFtQyxZQUFZO0FBQzNDLFFBQUtULEtBQUwsQ0FBV0csU0FBWCxFQUFzQlEsR0FBdEIsQ0FBMEIsS0FBMUI7QUFDSCxFQUZELEUiLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcblxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0ZXhwb3J0czoge30sXG4gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuIFx0XHRcdGxvYWRlZDogZmFsc2VcbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCAxZWUyMTA4ODY4ZjkyYmYwOTA3NiIsImNvbnN0ICR0aW1lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aW1lcicpO1xuY29uc3QgJGR1cmF0aW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2R1cmF0aW9uJyk7XG5jb25zdCAkYnJlYWsgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnJlYWsnKTtcbmNvbnN0IHN0YXJ0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YXJ0Jyk7XG5jb25zdCBzdG9wID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0b3AnKTtcbmxldCBkdXJhdGlvbiA9IDE1MDA7XG5sZXQgYnJlYWt0aW1lID0gMzAwO1xuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgaWYgKGV2ZW50LndoaWNoID09PSAxMykge1xuICAgIGR1cmF0aW9uID0gJGR1cmF0aW9uLnZhbHVlICogNjAgfHwgMTUwMDtcbiAgICBicmVha3RpbWUgPSAkYnJlYWsudmFsdWUgKiA2MCB8fCAzMDA7XG4gICAgcG9tb2Rvcm8uc3RvcCgpLnN0YXJ0KGR1cmF0aW9uKS5vbignZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICAkdGltZXIuaW5uZXJIVE1MID0gXCIwOjAwXCI7XG4gICAgICB0aGlzLnN0YXJ0KGJyZWFrdGltZSkub2ZmKCdlbmQnKTsgXG4gICAgfSk7XG4gICAgY29uc29sZS5sb2coZHVyYXRpb24gKyBcIiBcIiArIGJyZWFrdGltZSk7XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBtaWxsaXNUb01pbnV0ZXNBbmRTZWNvbmRzKG1pbGxpcykge1xuICB2YXIgbWludXRlcyA9IE1hdGguZmxvb3IobWlsbGlzIC8gNjAwMDApO1xuICAgIHZhciBzZWNvbmRzID0gKChtaWxsaXMgJSA2MDAwMCkgLyAxMDAwKS50b0ZpeGVkKDApO1xuICByZXR1cm4gbWludXRlcyArIFwiOlwiICsgKHNlY29uZHMgPCAxMCA/ICcwJyA6ICcnKSArIHNlY29uZHM7XG59XG5cbmNvbnN0IHBvbW9kb3JvID0gbmV3IFRpbWVyKHtcbiAgdGljazogMSxcbiAgb250aWNrOiBmdW5jdGlvbiAoc2VjKSB7XG4gICAgJHRpbWVyLmlubmVySFRNTCA9IG1pbGxpc1RvTWludXRlc0FuZFNlY29uZHMoc2VjKTtcbiAgfSxcbiAgb25zdGFydDogZnVuY3Rpb24oKSB7XG4gICAgY29uc29sZS5sb2coJ3N0YXJ0aW5nJyk7XG4gIH0sXG4gIG9uc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgcG9tb2Rvcm8uc3RvcCgpO1xuICAgIGNvbnNvbGUubG9nKCdTdG9wcGluZycpO1xuICB9LFxuICBvbmVuZDogZnVuY3Rpb24oKSB7XG4gICAgLy90aW1lciBlbmQgbm9ybWFsbHlcbiAgfVxufSk7XG5cbnN0YXJ0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gIHBvbW9kb3JvLnN0YXJ0KGR1cmF0aW9uKTtcbn0pO1xuXG5zdG9wLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gIHBvbW9kb3JvLnN0b3AoKTtcbn0pO1xuXG4vLyBvcHRpb25zXG5wb21vZG9yby5zdGFydChkdXJhdGlvbikub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnN0YXJ0KGJyZWFrdGltZSkub2ZmKCdlbmQnKTtcbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvbWFpbi5qcyJdLCJzb3VyY2VSb290IjoiIn0=