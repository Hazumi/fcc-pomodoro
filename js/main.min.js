/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	'use strict';
	
	var $timer = document.getElementById('timer');
	var $duration = document.getElementById('duration');
	var $break = document.getElementById('break');
	var start = document.getElementById('start');
	var stop = document.getElementById('stop');
	var duration = 1500;
	var breaktime = 300;
	var pomoTime = true;
	
	function startTimer() {
	  duration = $duration.value * 60 || 1500;
	  breaktime = $break.value * 60 || 300;
	  pomodoro.stop().start(duration).on('end', function () {
	    this.start(breaktime).on('end', startTimer);
	  });
	}
	
	document.addEventListener('keydown', function (event) {
	  if (event.which === 13) {
	    startTimer();
	  }
	});
	
	function millisToMinutesAndSeconds(millis) {
	  var minutes = Math.floor(millis / 60000);
	  var seconds = (millis % 60000 / 1000).toFixed(0);
	  return minutes + ":" + (seconds < 10 ? '0' : '') + seconds;
	}
	
	var pomodoro = new Timer({
	  tick: 1,
	  ontick: function ontick(sec) {
	    $timer.innerHTML = millisToMinutesAndSeconds(sec);
	  },
	  onstart: function onstart() {
	    $timer.innerHTML = 'Ready';
	  },
	  onstop: function onstop() {
	    pomodoro.stop();
	  }
	});
	
	start.addEventListener('click', function () {
	  startTimer();
	});
	
	stop.addEventListener('click', function () {
	  pomodoro.stop();
	});
	
	startTimer();

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgZmMxZmU2OWM2MmQ0MTgwMTliMTQiLCJ3ZWJwYWNrOi8vLy4vanMvbWFpbi5qcyJdLCJuYW1lcyI6WyIkdGltZXIiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiJGR1cmF0aW9uIiwiJGJyZWFrIiwic3RhcnQiLCJzdG9wIiwiZHVyYXRpb24iLCJicmVha3RpbWUiLCJwb21vVGltZSIsInN0YXJ0VGltZXIiLCJ2YWx1ZSIsInBvbW9kb3JvIiwib24iLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJ3aGljaCIsIm1pbGxpc1RvTWludXRlc0FuZFNlY29uZHMiLCJtaWxsaXMiLCJtaW51dGVzIiwiTWF0aCIsImZsb29yIiwic2Vjb25kcyIsInRvRml4ZWQiLCJUaW1lciIsInRpY2siLCJvbnRpY2siLCJzZWMiLCJpbm5lckhUTUwiLCJvbnN0YXJ0Iiwib25zdG9wIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7O0FDdENBLEtBQU1BLFNBQVNDLFNBQVNDLGNBQVQsQ0FBd0IsT0FBeEIsQ0FBZjtBQUNBLEtBQU1DLFlBQVlGLFNBQVNDLGNBQVQsQ0FBd0IsVUFBeEIsQ0FBbEI7QUFDQSxLQUFNRSxTQUFTSCxTQUFTQyxjQUFULENBQXdCLE9BQXhCLENBQWY7QUFDQSxLQUFNRyxRQUFRSixTQUFTQyxjQUFULENBQXdCLE9BQXhCLENBQWQ7QUFDQSxLQUFNSSxPQUFPTCxTQUFTQyxjQUFULENBQXdCLE1BQXhCLENBQWI7QUFDQSxLQUFJSyxXQUFXLElBQWY7QUFDQSxLQUFJQyxZQUFZLEdBQWhCO0FBQ0EsS0FBSUMsV0FBVyxJQUFmOztBQUVBLFVBQVNDLFVBQVQsR0FBc0I7QUFDcEJILGNBQVdKLFVBQVVRLEtBQVYsR0FBa0IsRUFBbEIsSUFBd0IsSUFBbkM7QUFDQUgsZUFBWUosT0FBT08sS0FBUCxHQUFlLEVBQWYsSUFBcUIsR0FBakM7QUFDQUMsWUFBU04sSUFBVCxHQUFnQkQsS0FBaEIsQ0FBc0JFLFFBQXRCLEVBQWdDTSxFQUFoQyxDQUFtQyxLQUFuQyxFQUEwQyxZQUFXO0FBQ25ELFVBQUtSLEtBQUwsQ0FBV0csU0FBWCxFQUFzQkssRUFBdEIsQ0FBeUIsS0FBekIsRUFBZ0NILFVBQWhDO0FBQ0QsSUFGRDtBQUdEOztBQUVEVCxVQUFTYSxnQkFBVCxDQUEwQixTQUExQixFQUFxQyxVQUFTQyxLQUFULEVBQWdCO0FBQ25ELE9BQUlBLE1BQU1DLEtBQU4sS0FBZ0IsRUFBcEIsRUFBd0I7QUFDdEJOO0FBQ0Q7QUFDRixFQUpEOztBQU1BLFVBQVNPLHlCQUFULENBQW1DQyxNQUFuQyxFQUEyQztBQUN6QyxPQUFJQyxVQUFVQyxLQUFLQyxLQUFMLENBQVdILFNBQVMsS0FBcEIsQ0FBZDtBQUNFLE9BQUlJLFVBQVUsQ0FBRUosU0FBUyxLQUFWLEdBQW1CLElBQXBCLEVBQTBCSyxPQUExQixDQUFrQyxDQUFsQyxDQUFkO0FBQ0YsVUFBT0osVUFBVSxHQUFWLElBQWlCRyxVQUFVLEVBQVYsR0FBZSxHQUFmLEdBQXFCLEVBQXRDLElBQTRDQSxPQUFuRDtBQUNEOztBQUVELEtBQU1WLFdBQVcsSUFBSVksS0FBSixDQUFVO0FBQ3pCQyxTQUFNLENBRG1CO0FBRXpCQyxXQUFRLGdCQUFVQyxHQUFWLEVBQWU7QUFDckIzQixZQUFPNEIsU0FBUCxHQUFtQlgsMEJBQTBCVSxHQUExQixDQUFuQjtBQUNELElBSndCO0FBS3pCRSxZQUFTLG1CQUFXO0FBQ2xCN0IsWUFBTzRCLFNBQVAsR0FBbUIsT0FBbkI7QUFDRCxJQVB3QjtBQVF6QkUsV0FBUSxrQkFBVztBQUNqQmxCLGNBQVNOLElBQVQ7QUFDRDtBQVZ3QixFQUFWLENBQWpCOztBQWFBRCxPQUFNUyxnQkFBTixDQUF1QixPQUF2QixFQUFnQyxZQUFXO0FBQ3pDSjtBQUNELEVBRkQ7O0FBSUFKLE1BQUtRLGdCQUFMLENBQXNCLE9BQXRCLEVBQStCLFlBQVc7QUFDeENGLFlBQVNOLElBQVQ7QUFDRCxFQUZEOztBQUlBSSxjIiwiZmlsZSI6Im1haW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgZmMxZmU2OWM2MmQ0MTgwMTliMTQiLCJjb25zdCAkdGltZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGltZXInKTtcbmNvbnN0ICRkdXJhdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkdXJhdGlvbicpO1xuY29uc3QgJGJyZWFrID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JyZWFrJyk7XG5jb25zdCBzdGFydCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGFydCcpO1xuY29uc3Qgc3RvcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdG9wJyk7XG5sZXQgZHVyYXRpb24gPSAxNTAwO1xubGV0IGJyZWFrdGltZSA9IDMwMDtcbmxldCBwb21vVGltZSA9IHRydWU7XG5cbmZ1bmN0aW9uIHN0YXJ0VGltZXIoKSB7XG4gIGR1cmF0aW9uID0gJGR1cmF0aW9uLnZhbHVlICogNjAgfHwgMTUwMDtcbiAgYnJlYWt0aW1lID0gJGJyZWFrLnZhbHVlICogNjAgfHwgMzAwO1xuICBwb21vZG9yby5zdG9wKCkuc3RhcnQoZHVyYXRpb24pLm9uKCdlbmQnLCBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0YXJ0KGJyZWFrdGltZSkub24oJ2VuZCcsIHN0YXJ0VGltZXIpO1xuICB9KTtcbn1cblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gIGlmIChldmVudC53aGljaCA9PT0gMTMpIHtcbiAgICBzdGFydFRpbWVyKCk7XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBtaWxsaXNUb01pbnV0ZXNBbmRTZWNvbmRzKG1pbGxpcykge1xuICB2YXIgbWludXRlcyA9IE1hdGguZmxvb3IobWlsbGlzIC8gNjAwMDApO1xuICAgIHZhciBzZWNvbmRzID0gKChtaWxsaXMgJSA2MDAwMCkgLyAxMDAwKS50b0ZpeGVkKDApO1xuICByZXR1cm4gbWludXRlcyArIFwiOlwiICsgKHNlY29uZHMgPCAxMCA/ICcwJyA6ICcnKSArIHNlY29uZHM7XG59XG5cbmNvbnN0IHBvbW9kb3JvID0gbmV3IFRpbWVyKHtcbiAgdGljazogMSxcbiAgb250aWNrOiBmdW5jdGlvbiAoc2VjKSB7XG4gICAgJHRpbWVyLmlubmVySFRNTCA9IG1pbGxpc1RvTWludXRlc0FuZFNlY29uZHMoc2VjKTtcbiAgfSxcbiAgb25zdGFydDogZnVuY3Rpb24oKSB7XG4gICAgJHRpbWVyLmlubmVySFRNTCA9ICdSZWFkeSc7XG4gIH0sXG4gIG9uc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgcG9tb2Rvcm8uc3RvcCgpO1xuICB9XG59KTtcblxuc3RhcnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgc3RhcnRUaW1lcigpO1xufSk7XG5cbnN0b3AuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgcG9tb2Rvcm8uc3RvcCgpO1xufSk7XG5cbnN0YXJ0VGltZXIoKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL21haW4uanMiXSwic291cmNlUm9vdCI6IiJ9